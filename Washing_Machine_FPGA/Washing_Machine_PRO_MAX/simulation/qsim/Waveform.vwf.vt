// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/12/2022 01:37:29"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Washing_Machine
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Washing_Machine_vlg_sample_tst(
	CLOCK,
	END,
	PAUSE,
	RESET,
	START,
	WATER_LEVEL,
	sampler_tx
);
input  CLOCK;
input  END;
input  PAUSE;
input  RESET;
input  START;
input  WATER_LEVEL;
output sampler_tx;

reg sample;
time current_time;
always @(CLOCK or END or PAUSE or RESET or START or WATER_LEVEL)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Washing_Machine_vlg_check_tst (
	a,
	b,
	c,
	d,
	e,
	f,
	g,
	H,
	L,
	LED_DEHYDRATING,
	LED_FREE,
	LED_RINSING,
	LED_WARNING,
	LED_WATER_DRAINING,
	LED_WATER_SUPPLY,
	LOW_MINUTE,
	LOW_ONE_TENTH_SECOND,
	LOW_SECOND,
	LOW_TEN_SECOND,
	sampler_rx
);
input  a;
input  b;
input  c;
input  d;
input  e;
input  f;
input  g;
input [15:0] H;
input [15:0] L;
input  LED_DEHYDRATING;
input  LED_FREE;
input  LED_RINSING;
input  LED_WARNING;
input  LED_WATER_DRAINING;
input  LED_WATER_SUPPLY;
input  LOW_MINUTE;
input  LOW_ONE_TENTH_SECOND;
input  LOW_SECOND;
input  LOW_TEN_SECOND;
input sampler_rx;

reg  a_expected;
reg  b_expected;
reg  c_expected;
reg  d_expected;
reg  e_expected;
reg  f_expected;
reg  g_expected;
reg [15:0] H_expected;
reg [15:0] L_expected;
reg  LED_DEHYDRATING_expected;
reg  LED_FREE_expected;
reg  LED_RINSING_expected;
reg  LED_WARNING_expected;
reg  LED_WATER_DRAINING_expected;
reg  LED_WATER_SUPPLY_expected;
reg  LOW_MINUTE_expected;
reg  LOW_ONE_TENTH_SECOND_expected;
reg  LOW_SECOND_expected;
reg  LOW_TEN_SECOND_expected;

reg  a_prev;
reg  b_prev;
reg  c_prev;
reg  d_prev;
reg  e_prev;
reg  f_prev;
reg  g_prev;
reg [15:0] H_prev;
reg [15:0] L_prev;
reg  LED_DEHYDRATING_prev;
reg  LED_FREE_prev;
reg  LED_RINSING_prev;
reg  LED_WARNING_prev;
reg  LED_WATER_DRAINING_prev;
reg  LED_WATER_SUPPLY_prev;
reg  LOW_MINUTE_prev;
reg  LOW_ONE_TENTH_SECOND_prev;
reg  LOW_SECOND_prev;
reg  LOW_TEN_SECOND_prev;

reg  a_expected_prev;
reg  b_expected_prev;
reg  c_expected_prev;
reg  d_expected_prev;
reg  e_expected_prev;
reg  f_expected_prev;
reg  g_expected_prev;
reg [15:0] H_expected_prev;
reg [15:0] L_expected_prev;
reg  LED_DEHYDRATING_expected_prev;
reg  LED_FREE_expected_prev;
reg  LED_RINSING_expected_prev;
reg  LED_WARNING_expected_prev;
reg  LED_WATER_DRAINING_expected_prev;
reg  LED_WATER_SUPPLY_expected_prev;
reg  LOW_MINUTE_expected_prev;
reg  LOW_ONE_TENTH_SECOND_expected_prev;
reg  LOW_SECOND_expected_prev;
reg  LOW_TEN_SECOND_expected_prev;

reg  last_a_exp;
reg  last_b_exp;
reg  last_c_exp;
reg  last_d_exp;
reg  last_e_exp;
reg  last_f_exp;
reg  last_g_exp;
reg [15:0] last_H_exp;
reg [15:0] last_L_exp;
reg  last_LED_DEHYDRATING_exp;
reg  last_LED_FREE_exp;
reg  last_LED_RINSING_exp;
reg  last_LED_WARNING_exp;
reg  last_LED_WATER_DRAINING_exp;
reg  last_LED_WATER_SUPPLY_exp;
reg  last_LOW_MINUTE_exp;
reg  last_LOW_ONE_TENTH_SECOND_exp;
reg  last_LOW_SECOND_exp;
reg  last_LOW_TEN_SECOND_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:19] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 19'b1;
end

// update real /o prevs

always @(trigger)
begin
	a_prev = a;
	b_prev = b;
	c_prev = c;
	d_prev = d;
	e_prev = e;
	f_prev = f;
	g_prev = g;
	H_prev = H;
	L_prev = L;
	LED_DEHYDRATING_prev = LED_DEHYDRATING;
	LED_FREE_prev = LED_FREE;
	LED_RINSING_prev = LED_RINSING;
	LED_WARNING_prev = LED_WARNING;
	LED_WATER_DRAINING_prev = LED_WATER_DRAINING;
	LED_WATER_SUPPLY_prev = LED_WATER_SUPPLY;
	LOW_MINUTE_prev = LOW_MINUTE;
	LOW_ONE_TENTH_SECOND_prev = LOW_ONE_TENTH_SECOND;
	LOW_SECOND_prev = LOW_SECOND;
	LOW_TEN_SECOND_prev = LOW_TEN_SECOND;
end

// update expected /o prevs

always @(trigger)
begin
	a_expected_prev = a_expected;
	b_expected_prev = b_expected;
	c_expected_prev = c_expected;
	d_expected_prev = d_expected;
	e_expected_prev = e_expected;
	f_expected_prev = f_expected;
	g_expected_prev = g_expected;
	H_expected_prev = H_expected;
	L_expected_prev = L_expected;
	LED_DEHYDRATING_expected_prev = LED_DEHYDRATING_expected;
	LED_FREE_expected_prev = LED_FREE_expected;
	LED_RINSING_expected_prev = LED_RINSING_expected;
	LED_WARNING_expected_prev = LED_WARNING_expected;
	LED_WATER_DRAINING_expected_prev = LED_WATER_DRAINING_expected;
	LED_WATER_SUPPLY_expected_prev = LED_WATER_SUPPLY_expected;
	LOW_MINUTE_expected_prev = LOW_MINUTE_expected;
	LOW_ONE_TENTH_SECOND_expected_prev = LOW_ONE_TENTH_SECOND_expected;
	LOW_SECOND_expected_prev = LOW_SECOND_expected;
	LOW_TEN_SECOND_expected_prev = LOW_TEN_SECOND_expected;
end



// expected a
initial
begin
	a_expected = 1'bX;
end 

// expected b
initial
begin
	b_expected = 1'bX;
end 

// expected c
initial
begin
	c_expected = 1'bX;
end 

// expected d
initial
begin
	d_expected = 1'bX;
end 

// expected e
initial
begin
	e_expected = 1'bX;
end 

// expected f
initial
begin
	f_expected = 1'bX;
end 

// expected g
initial
begin
	g_expected = 1'bX;
end 
// expected H[ 15 ]
initial
begin
	H_expected[15] = 1'bX;
end 
// expected H[ 14 ]
initial
begin
	H_expected[14] = 1'bX;
end 
// expected H[ 13 ]
initial
begin
	H_expected[13] = 1'bX;
end 
// expected H[ 12 ]
initial
begin
	H_expected[12] = 1'bX;
end 
// expected H[ 11 ]
initial
begin
	H_expected[11] = 1'bX;
end 
// expected H[ 10 ]
initial
begin
	H_expected[10] = 1'bX;
end 
// expected H[ 9 ]
initial
begin
	H_expected[9] = 1'bX;
end 
// expected H[ 8 ]
initial
begin
	H_expected[8] = 1'bX;
end 
// expected H[ 7 ]
initial
begin
	H_expected[7] = 1'bX;
end 
// expected H[ 6 ]
initial
begin
	H_expected[6] = 1'bX;
end 
// expected H[ 5 ]
initial
begin
	H_expected[5] = 1'bX;
end 
// expected H[ 4 ]
initial
begin
	H_expected[4] = 1'bX;
end 
// expected H[ 3 ]
initial
begin
	H_expected[3] = 1'bX;
end 
// expected H[ 2 ]
initial
begin
	H_expected[2] = 1'bX;
end 
// expected H[ 1 ]
initial
begin
	H_expected[1] = 1'bX;
end 
// expected H[ 0 ]
initial
begin
	H_expected[0] = 1'bX;
end 
// expected L[ 15 ]
initial
begin
	L_expected[15] = 1'bX;
end 
// expected L[ 14 ]
initial
begin
	L_expected[14] = 1'bX;
end 
// expected L[ 13 ]
initial
begin
	L_expected[13] = 1'bX;
end 
// expected L[ 12 ]
initial
begin
	L_expected[12] = 1'bX;
end 
// expected L[ 11 ]
initial
begin
	L_expected[11] = 1'bX;
end 
// expected L[ 10 ]
initial
begin
	L_expected[10] = 1'bX;
end 
// expected L[ 9 ]
initial
begin
	L_expected[9] = 1'bX;
end 
// expected L[ 8 ]
initial
begin
	L_expected[8] = 1'bX;
end 
// expected L[ 7 ]
initial
begin
	L_expected[7] = 1'bX;
end 
// expected L[ 6 ]
initial
begin
	L_expected[6] = 1'bX;
end 
// expected L[ 5 ]
initial
begin
	L_expected[5] = 1'bX;
end 
// expected L[ 4 ]
initial
begin
	L_expected[4] = 1'bX;
end 
// expected L[ 3 ]
initial
begin
	L_expected[3] = 1'bX;
end 
// expected L[ 2 ]
initial
begin
	L_expected[2] = 1'bX;
end 
// expected L[ 1 ]
initial
begin
	L_expected[1] = 1'bX;
end 
// expected L[ 0 ]
initial
begin
	L_expected[0] = 1'bX;
end 

// expected LED_FREE
initial
begin
	LED_FREE_expected = 1'bX;
end 

// expected LED_WATER_SUPPLY
initial
begin
	LED_WATER_SUPPLY_expected = 1'bX;
end 

// expected LED_RINSING
initial
begin
	LED_RINSING_expected = 1'bX;
end 

// expected LED_WATER_DRAINING
initial
begin
	LED_WATER_DRAINING_expected = 1'bX;
end 

// expected LED_DEHYDRATING
initial
begin
	LED_DEHYDRATING_expected = 1'bX;
end 

// expected LED_WARNING
initial
begin
	LED_WARNING_expected = 1'bX;
end 

// expected LOW_ONE_TENTH_SECOND
initial
begin
	LOW_ONE_TENTH_SECOND_expected = 1'bX;
end 

// expected LOW_SECOND
initial
begin
	LOW_SECOND_expected = 1'bX;
end 

// expected LOW_TEN_SECOND
initial
begin
	LOW_TEN_SECOND_expected = 1'bX;
end 

// expected LOW_MINUTE
initial
begin
	LOW_MINUTE_expected = 1'bX;
end 
// generate trigger
always @(a_expected or a or b_expected or b or c_expected or c or d_expected or d or e_expected or e or f_expected or f or g_expected or g or H_expected or H or L_expected or L or LED_DEHYDRATING_expected or LED_DEHYDRATING or LED_FREE_expected or LED_FREE or LED_RINSING_expected or LED_RINSING or LED_WARNING_expected or LED_WARNING or LED_WATER_DRAINING_expected or LED_WATER_DRAINING or LED_WATER_SUPPLY_expected or LED_WATER_SUPPLY or LOW_MINUTE_expected or LOW_MINUTE or LOW_ONE_TENTH_SECOND_expected or LOW_ONE_TENTH_SECOND or LOW_SECOND_expected or LOW_SECOND or LOW_TEN_SECOND_expected or LOW_TEN_SECOND)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected a = %b | expected b = %b | expected c = %b | expected d = %b | expected e = %b | expected f = %b | expected g = %b | expected H = %b | expected L = %b | expected LED_DEHYDRATING = %b | expected LED_FREE = %b | expected LED_RINSING = %b | expected LED_WARNING = %b | expected LED_WATER_DRAINING = %b | expected LED_WATER_SUPPLY = %b | expected LOW_MINUTE = %b | expected LOW_ONE_TENTH_SECOND = %b | expected LOW_SECOND = %b | expected LOW_TEN_SECOND = %b | ",a_expected_prev,b_expected_prev,c_expected_prev,d_expected_prev,e_expected_prev,f_expected_prev,g_expected_prev,H_expected_prev,L_expected_prev,LED_DEHYDRATING_expected_prev,LED_FREE_expected_prev,LED_RINSING_expected_prev,LED_WARNING_expected_prev,LED_WATER_DRAINING_expected_prev,LED_WATER_SUPPLY_expected_prev,LOW_MINUTE_expected_prev,LOW_ONE_TENTH_SECOND_expected_prev,LOW_SECOND_expected_prev,LOW_TEN_SECOND_expected_prev);
	$display("| real a = %b | real b = %b | real c = %b | real d = %b | real e = %b | real f = %b | real g = %b | real H = %b | real L = %b | real LED_DEHYDRATING = %b | real LED_FREE = %b | real LED_RINSING = %b | real LED_WARNING = %b | real LED_WATER_DRAINING = %b | real LED_WATER_SUPPLY = %b | real LOW_MINUTE = %b | real LOW_ONE_TENTH_SECOND = %b | real LOW_SECOND = %b | real LOW_TEN_SECOND = %b | ",a_prev,b_prev,c_prev,d_prev,e_prev,f_prev,g_prev,H_prev,L_prev,LED_DEHYDRATING_prev,LED_FREE_prev,LED_RINSING_prev,LED_WARNING_prev,LED_WATER_DRAINING_prev,LED_WATER_SUPPLY_prev,LOW_MINUTE_prev,LOW_ONE_TENTH_SECOND_prev,LOW_SECOND_prev,LOW_TEN_SECOND_prev);
`endif
	if (
		( a_expected_prev !== 1'bx ) && ( a_prev !== a_expected_prev )
		&& ((a_expected_prev !== last_a_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp = a_expected_prev;
	end
	if (
		( b_expected_prev !== 1'bx ) && ( b_prev !== b_expected_prev )
		&& ((b_expected_prev !== last_b_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp = b_expected_prev;
	end
	if (
		( c_expected_prev !== 1'bx ) && ( c_prev !== c_expected_prev )
		&& ((c_expected_prev !== last_c_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_c_exp = c_expected_prev;
	end
	if (
		( d_expected_prev !== 1'bx ) && ( d_prev !== d_expected_prev )
		&& ((d_expected_prev !== last_d_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d_expected_prev);
		$display ("     Real value = %b", d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_d_exp = d_expected_prev;
	end
	if (
		( e_expected_prev !== 1'bx ) && ( e_prev !== e_expected_prev )
		&& ((e_expected_prev !== last_e_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port e :: @time = %t",  $realtime);
		$display ("     Expected value = %b", e_expected_prev);
		$display ("     Real value = %b", e_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_e_exp = e_expected_prev;
	end
	if (
		( f_expected_prev !== 1'bx ) && ( f_prev !== f_expected_prev )
		&& ((f_expected_prev !== last_f_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_expected_prev);
		$display ("     Real value = %b", f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_f_exp = f_expected_prev;
	end
	if (
		( g_expected_prev !== 1'bx ) && ( g_prev !== g_expected_prev )
		&& ((g_expected_prev !== last_g_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port g :: @time = %t",  $realtime);
		$display ("     Expected value = %b", g_expected_prev);
		$display ("     Real value = %b", g_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_g_exp = g_expected_prev;
	end
	if (
		( H_expected_prev[0] !== 1'bx ) && ( H_prev[0] !== H_expected_prev[0] )
		&& ((H_expected_prev[0] !== last_H_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_expected_prev);
		$display ("     Real value = %b", H_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_H_exp[0] = H_expected_prev[0];
	end
	if (
		( H_expected_prev[1] !== 1'bx ) && ( H_prev[1] !== H_expected_prev[1] )
		&& ((H_expected_prev[1] !== last_H_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_expected_prev);
		$display ("     Real value = %b", H_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_H_exp[1] = H_expected_prev[1];
	end
	if (
		( H_expected_prev[2] !== 1'bx ) && ( H_prev[2] !== H_expected_prev[2] )
		&& ((H_expected_prev[2] !== last_H_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_expected_prev);
		$display ("     Real value = %b", H_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_H_exp[2] = H_expected_prev[2];
	end
	if (
		( H_expected_prev[3] !== 1'bx ) && ( H_prev[3] !== H_expected_prev[3] )
		&& ((H_expected_prev[3] !== last_H_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_expected_prev);
		$display ("     Real value = %b", H_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_H_exp[3] = H_expected_prev[3];
	end
	if (
		( H_expected_prev[4] !== 1'bx ) && ( H_prev[4] !== H_expected_prev[4] )
		&& ((H_expected_prev[4] !== last_H_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_expected_prev);
		$display ("     Real value = %b", H_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_H_exp[4] = H_expected_prev[4];
	end
	if (
		( H_expected_prev[5] !== 1'bx ) && ( H_prev[5] !== H_expected_prev[5] )
		&& ((H_expected_prev[5] !== last_H_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_expected_prev);
		$display ("     Real value = %b", H_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_H_exp[5] = H_expected_prev[5];
	end
	if (
		( H_expected_prev[6] !== 1'bx ) && ( H_prev[6] !== H_expected_prev[6] )
		&& ((H_expected_prev[6] !== last_H_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_expected_prev);
		$display ("     Real value = %b", H_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_H_exp[6] = H_expected_prev[6];
	end
	if (
		( H_expected_prev[7] !== 1'bx ) && ( H_prev[7] !== H_expected_prev[7] )
		&& ((H_expected_prev[7] !== last_H_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_expected_prev);
		$display ("     Real value = %b", H_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_H_exp[7] = H_expected_prev[7];
	end
	if (
		( H_expected_prev[8] !== 1'bx ) && ( H_prev[8] !== H_expected_prev[8] )
		&& ((H_expected_prev[8] !== last_H_exp[8]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_expected_prev);
		$display ("     Real value = %b", H_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_H_exp[8] = H_expected_prev[8];
	end
	if (
		( H_expected_prev[9] !== 1'bx ) && ( H_prev[9] !== H_expected_prev[9] )
		&& ((H_expected_prev[9] !== last_H_exp[9]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_expected_prev);
		$display ("     Real value = %b", H_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_H_exp[9] = H_expected_prev[9];
	end
	if (
		( H_expected_prev[10] !== 1'bx ) && ( H_prev[10] !== H_expected_prev[10] )
		&& ((H_expected_prev[10] !== last_H_exp[10]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_expected_prev);
		$display ("     Real value = %b", H_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_H_exp[10] = H_expected_prev[10];
	end
	if (
		( H_expected_prev[11] !== 1'bx ) && ( H_prev[11] !== H_expected_prev[11] )
		&& ((H_expected_prev[11] !== last_H_exp[11]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_expected_prev);
		$display ("     Real value = %b", H_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_H_exp[11] = H_expected_prev[11];
	end
	if (
		( H_expected_prev[12] !== 1'bx ) && ( H_prev[12] !== H_expected_prev[12] )
		&& ((H_expected_prev[12] !== last_H_exp[12]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_expected_prev);
		$display ("     Real value = %b", H_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_H_exp[12] = H_expected_prev[12];
	end
	if (
		( H_expected_prev[13] !== 1'bx ) && ( H_prev[13] !== H_expected_prev[13] )
		&& ((H_expected_prev[13] !== last_H_exp[13]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_expected_prev);
		$display ("     Real value = %b", H_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_H_exp[13] = H_expected_prev[13];
	end
	if (
		( H_expected_prev[14] !== 1'bx ) && ( H_prev[14] !== H_expected_prev[14] )
		&& ((H_expected_prev[14] !== last_H_exp[14]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_expected_prev);
		$display ("     Real value = %b", H_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_H_exp[14] = H_expected_prev[14];
	end
	if (
		( H_expected_prev[15] !== 1'bx ) && ( H_prev[15] !== H_expected_prev[15] )
		&& ((H_expected_prev[15] !== last_H_exp[15]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_expected_prev);
		$display ("     Real value = %b", H_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_H_exp[15] = H_expected_prev[15];
	end
	if (
		( L_expected_prev[0] !== 1'bx ) && ( L_prev[0] !== L_expected_prev[0] )
		&& ((L_expected_prev[0] !== last_L_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L_expected_prev);
		$display ("     Real value = %b", L_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_L_exp[0] = L_expected_prev[0];
	end
	if (
		( L_expected_prev[1] !== 1'bx ) && ( L_prev[1] !== L_expected_prev[1] )
		&& ((L_expected_prev[1] !== last_L_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L_expected_prev);
		$display ("     Real value = %b", L_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_L_exp[1] = L_expected_prev[1];
	end
	if (
		( L_expected_prev[2] !== 1'bx ) && ( L_prev[2] !== L_expected_prev[2] )
		&& ((L_expected_prev[2] !== last_L_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L_expected_prev);
		$display ("     Real value = %b", L_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_L_exp[2] = L_expected_prev[2];
	end
	if (
		( L_expected_prev[3] !== 1'bx ) && ( L_prev[3] !== L_expected_prev[3] )
		&& ((L_expected_prev[3] !== last_L_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L_expected_prev);
		$display ("     Real value = %b", L_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_L_exp[3] = L_expected_prev[3];
	end
	if (
		( L_expected_prev[4] !== 1'bx ) && ( L_prev[4] !== L_expected_prev[4] )
		&& ((L_expected_prev[4] !== last_L_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L_expected_prev);
		$display ("     Real value = %b", L_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_L_exp[4] = L_expected_prev[4];
	end
	if (
		( L_expected_prev[5] !== 1'bx ) && ( L_prev[5] !== L_expected_prev[5] )
		&& ((L_expected_prev[5] !== last_L_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L_expected_prev);
		$display ("     Real value = %b", L_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_L_exp[5] = L_expected_prev[5];
	end
	if (
		( L_expected_prev[6] !== 1'bx ) && ( L_prev[6] !== L_expected_prev[6] )
		&& ((L_expected_prev[6] !== last_L_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L_expected_prev);
		$display ("     Real value = %b", L_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_L_exp[6] = L_expected_prev[6];
	end
	if (
		( L_expected_prev[7] !== 1'bx ) && ( L_prev[7] !== L_expected_prev[7] )
		&& ((L_expected_prev[7] !== last_L_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L_expected_prev);
		$display ("     Real value = %b", L_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_L_exp[7] = L_expected_prev[7];
	end
	if (
		( L_expected_prev[8] !== 1'bx ) && ( L_prev[8] !== L_expected_prev[8] )
		&& ((L_expected_prev[8] !== last_L_exp[8]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L_expected_prev);
		$display ("     Real value = %b", L_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_L_exp[8] = L_expected_prev[8];
	end
	if (
		( L_expected_prev[9] !== 1'bx ) && ( L_prev[9] !== L_expected_prev[9] )
		&& ((L_expected_prev[9] !== last_L_exp[9]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L_expected_prev);
		$display ("     Real value = %b", L_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_L_exp[9] = L_expected_prev[9];
	end
	if (
		( L_expected_prev[10] !== 1'bx ) && ( L_prev[10] !== L_expected_prev[10] )
		&& ((L_expected_prev[10] !== last_L_exp[10]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L_expected_prev);
		$display ("     Real value = %b", L_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_L_exp[10] = L_expected_prev[10];
	end
	if (
		( L_expected_prev[11] !== 1'bx ) && ( L_prev[11] !== L_expected_prev[11] )
		&& ((L_expected_prev[11] !== last_L_exp[11]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L_expected_prev);
		$display ("     Real value = %b", L_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_L_exp[11] = L_expected_prev[11];
	end
	if (
		( L_expected_prev[12] !== 1'bx ) && ( L_prev[12] !== L_expected_prev[12] )
		&& ((L_expected_prev[12] !== last_L_exp[12]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L_expected_prev);
		$display ("     Real value = %b", L_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_L_exp[12] = L_expected_prev[12];
	end
	if (
		( L_expected_prev[13] !== 1'bx ) && ( L_prev[13] !== L_expected_prev[13] )
		&& ((L_expected_prev[13] !== last_L_exp[13]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L_expected_prev);
		$display ("     Real value = %b", L_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_L_exp[13] = L_expected_prev[13];
	end
	if (
		( L_expected_prev[14] !== 1'bx ) && ( L_prev[14] !== L_expected_prev[14] )
		&& ((L_expected_prev[14] !== last_L_exp[14]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L_expected_prev);
		$display ("     Real value = %b", L_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_L_exp[14] = L_expected_prev[14];
	end
	if (
		( L_expected_prev[15] !== 1'bx ) && ( L_prev[15] !== L_expected_prev[15] )
		&& ((L_expected_prev[15] !== last_L_exp[15]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L_expected_prev);
		$display ("     Real value = %b", L_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_L_exp[15] = L_expected_prev[15];
	end
	if (
		( LED_DEHYDRATING_expected_prev !== 1'bx ) && ( LED_DEHYDRATING_prev !== LED_DEHYDRATING_expected_prev )
		&& ((LED_DEHYDRATING_expected_prev !== last_LED_DEHYDRATING_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED_DEHYDRATING :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_DEHYDRATING_expected_prev);
		$display ("     Real value = %b", LED_DEHYDRATING_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_LED_DEHYDRATING_exp = LED_DEHYDRATING_expected_prev;
	end
	if (
		( LED_FREE_expected_prev !== 1'bx ) && ( LED_FREE_prev !== LED_FREE_expected_prev )
		&& ((LED_FREE_expected_prev !== last_LED_FREE_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED_FREE :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_FREE_expected_prev);
		$display ("     Real value = %b", LED_FREE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_LED_FREE_exp = LED_FREE_expected_prev;
	end
	if (
		( LED_RINSING_expected_prev !== 1'bx ) && ( LED_RINSING_prev !== LED_RINSING_expected_prev )
		&& ((LED_RINSING_expected_prev !== last_LED_RINSING_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED_RINSING :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_RINSING_expected_prev);
		$display ("     Real value = %b", LED_RINSING_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_LED_RINSING_exp = LED_RINSING_expected_prev;
	end
	if (
		( LED_WARNING_expected_prev !== 1'bx ) && ( LED_WARNING_prev !== LED_WARNING_expected_prev )
		&& ((LED_WARNING_expected_prev !== last_LED_WARNING_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED_WARNING :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_WARNING_expected_prev);
		$display ("     Real value = %b", LED_WARNING_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_LED_WARNING_exp = LED_WARNING_expected_prev;
	end
	if (
		( LED_WATER_DRAINING_expected_prev !== 1'bx ) && ( LED_WATER_DRAINING_prev !== LED_WATER_DRAINING_expected_prev )
		&& ((LED_WATER_DRAINING_expected_prev !== last_LED_WATER_DRAINING_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED_WATER_DRAINING :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_WATER_DRAINING_expected_prev);
		$display ("     Real value = %b", LED_WATER_DRAINING_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_LED_WATER_DRAINING_exp = LED_WATER_DRAINING_expected_prev;
	end
	if (
		( LED_WATER_SUPPLY_expected_prev !== 1'bx ) && ( LED_WATER_SUPPLY_prev !== LED_WATER_SUPPLY_expected_prev )
		&& ((LED_WATER_SUPPLY_expected_prev !== last_LED_WATER_SUPPLY_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED_WATER_SUPPLY :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_WATER_SUPPLY_expected_prev);
		$display ("     Real value = %b", LED_WATER_SUPPLY_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_LED_WATER_SUPPLY_exp = LED_WATER_SUPPLY_expected_prev;
	end
	if (
		( LOW_MINUTE_expected_prev !== 1'bx ) && ( LOW_MINUTE_prev !== LOW_MINUTE_expected_prev )
		&& ((LOW_MINUTE_expected_prev !== last_LOW_MINUTE_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOW_MINUTE :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOW_MINUTE_expected_prev);
		$display ("     Real value = %b", LOW_MINUTE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_LOW_MINUTE_exp = LOW_MINUTE_expected_prev;
	end
	if (
		( LOW_ONE_TENTH_SECOND_expected_prev !== 1'bx ) && ( LOW_ONE_TENTH_SECOND_prev !== LOW_ONE_TENTH_SECOND_expected_prev )
		&& ((LOW_ONE_TENTH_SECOND_expected_prev !== last_LOW_ONE_TENTH_SECOND_exp) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOW_ONE_TENTH_SECOND :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOW_ONE_TENTH_SECOND_expected_prev);
		$display ("     Real value = %b", LOW_ONE_TENTH_SECOND_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_LOW_ONE_TENTH_SECOND_exp = LOW_ONE_TENTH_SECOND_expected_prev;
	end
	if (
		( LOW_SECOND_expected_prev !== 1'bx ) && ( LOW_SECOND_prev !== LOW_SECOND_expected_prev )
		&& ((LOW_SECOND_expected_prev !== last_LOW_SECOND_exp) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOW_SECOND :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOW_SECOND_expected_prev);
		$display ("     Real value = %b", LOW_SECOND_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_LOW_SECOND_exp = LOW_SECOND_expected_prev;
	end
	if (
		( LOW_TEN_SECOND_expected_prev !== 1'bx ) && ( LOW_TEN_SECOND_prev !== LOW_TEN_SECOND_expected_prev )
		&& ((LOW_TEN_SECOND_expected_prev !== last_LOW_TEN_SECOND_exp) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOW_TEN_SECOND :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOW_TEN_SECOND_expected_prev);
		$display ("     Real value = %b", LOW_TEN_SECOND_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_LOW_TEN_SECOND_exp = LOW_TEN_SECOND_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Washing_Machine_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK;
reg END;
reg PAUSE;
reg RESET;
reg START;
reg WATER_LEVEL;
// wires                                               
wire a;
wire b;
wire c;
wire d;
wire e;
wire f;
wire g;
wire [15:0] H;
wire [15:0] L;
wire LED_DEHYDRATING;
wire LED_FREE;
wire LED_RINSING;
wire LED_WARNING;
wire LED_WATER_DRAINING;
wire LED_WATER_SUPPLY;
wire LOW_MINUTE;
wire LOW_ONE_TENTH_SECOND;
wire LOW_SECOND;
wire LOW_TEN_SECOND;

wire sampler;                             

// assign statements (if any)                          
Washing_Machine i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.c(c),
	.CLOCK(CLOCK),
	.d(d),
	.e(e),
	.\END (END),
	.f(f),
	.g(g),
	.H(H),
	.L(L),
	.LED_DEHYDRATING(LED_DEHYDRATING),
	.LED_FREE(LED_FREE),
	.LED_RINSING(LED_RINSING),
	.LED_WARNING(LED_WARNING),
	.LED_WATER_DRAINING(LED_WATER_DRAINING),
	.LED_WATER_SUPPLY(LED_WATER_SUPPLY),
	.LOW_MINUTE(LOW_MINUTE),
	.LOW_ONE_TENTH_SECOND(LOW_ONE_TENTH_SECOND),
	.LOW_SECOND(LOW_SECOND),
	.LOW_TEN_SECOND(LOW_TEN_SECOND),
	.PAUSE(PAUSE),
	.RESET(RESET),
	.START(START),
	.WATER_LEVEL(WATER_LEVEL)
);

// CLOCK
always
begin
	CLOCK = 1'b0;
	CLOCK = #500 1'b1;
	#500;
end 

// RESET
initial
begin
	RESET = 1'b1;
	RESET = #10000 1'b0;
	RESET = #10000 1'b1;
end 

// START
initial
begin
	START = 1'b1;
	START = #30000 1'b0;
	START = #10000 1'b1;
	START = #270000 1'b0;
	START = #10000 1'b1;
end 

// WATER_LEVEL
initial
begin
	WATER_LEVEL = 1'b1;
	WATER_LEVEL = #50000 1'b0;
	WATER_LEVEL = #10000 1'b1;
	WATER_LEVEL = #270000 1'b0;
	WATER_LEVEL = #10000 1'b1;
end 

// PAUSE
initial
begin
	PAUSE = 1'b1;
	PAUSE = #370000 1'b0;
	PAUSE = #140000 1'b1;
end 

// END
initial
begin
	END = 1'b1;
end 

Washing_Machine_vlg_sample_tst tb_sample (
	.CLOCK(CLOCK),
	.END(END),
	.PAUSE(PAUSE),
	.RESET(RESET),
	.START(START),
	.WATER_LEVEL(WATER_LEVEL),
	.sampler_tx(sampler)
);

Washing_Machine_vlg_check_tst tb_out(
	.a(a),
	.b(b),
	.c(c),
	.d(d),
	.e(e),
	.f(f),
	.g(g),
	.H(H),
	.L(L),
	.LED_DEHYDRATING(LED_DEHYDRATING),
	.LED_FREE(LED_FREE),
	.LED_RINSING(LED_RINSING),
	.LED_WARNING(LED_WARNING),
	.LED_WATER_DRAINING(LED_WATER_DRAINING),
	.LED_WATER_SUPPLY(LED_WATER_SUPPLY),
	.LOW_MINUTE(LOW_MINUTE),
	.LOW_ONE_TENTH_SECOND(LOW_ONE_TENTH_SECOND),
	.LOW_SECOND(LOW_SECOND),
	.LOW_TEN_SECOND(LOW_TEN_SECOND),
	.sampler_rx(sampler)
);
endmodule

