// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/12/2022 01:13:19"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Seven_segment_digital_tube_choose
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Seven_segment_digital_tube_choose_vlg_sample_tst(
	clk,
	clr,
	rst,
	sampler_tx
);
input  clk;
input  clr;
input  rst;
output sampler_tx;

reg sample;
time current_time;
always @(clk or clr or rst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Seven_segment_digital_tube_choose_vlg_check_tst (
	low_min,
	low_one_tenth_sec,
	low_sec,
	low_ten_sec,
	sampler_rx
);
input  low_min;
input  low_one_tenth_sec;
input  low_sec;
input  low_ten_sec;
input sampler_rx;

reg  low_min_expected;
reg  low_one_tenth_sec_expected;
reg  low_sec_expected;
reg  low_ten_sec_expected;

reg  low_min_prev;
reg  low_one_tenth_sec_prev;
reg  low_sec_prev;
reg  low_ten_sec_prev;

reg  low_min_expected_prev;
reg  low_one_tenth_sec_expected_prev;
reg  low_sec_expected_prev;
reg  low_ten_sec_expected_prev;

reg  last_low_min_exp;
reg  last_low_one_tenth_sec_exp;
reg  last_low_sec_exp;
reg  last_low_ten_sec_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	low_min_prev = low_min;
	low_one_tenth_sec_prev = low_one_tenth_sec;
	low_sec_prev = low_sec;
	low_ten_sec_prev = low_ten_sec;
end

// update expected /o prevs

always @(trigger)
begin
	low_min_expected_prev = low_min_expected;
	low_one_tenth_sec_expected_prev = low_one_tenth_sec_expected;
	low_sec_expected_prev = low_sec_expected;
	low_ten_sec_expected_prev = low_ten_sec_expected;
end



// expected low_min
initial
begin
	low_min_expected = 1'bX;
end 

// expected low_one_tenth_sec
initial
begin
	low_one_tenth_sec_expected = 1'bX;
end 

// expected low_sec
initial
begin
	low_sec_expected = 1'bX;
end 

// expected low_ten_sec
initial
begin
	low_ten_sec_expected = 1'bX;
end 
// generate trigger
always @(low_min_expected or low_min or low_one_tenth_sec_expected or low_one_tenth_sec or low_sec_expected or low_sec or low_ten_sec_expected or low_ten_sec)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected low_min = %b | expected low_one_tenth_sec = %b | expected low_sec = %b | expected low_ten_sec = %b | ",low_min_expected_prev,low_one_tenth_sec_expected_prev,low_sec_expected_prev,low_ten_sec_expected_prev);
	$display("| real low_min = %b | real low_one_tenth_sec = %b | real low_sec = %b | real low_ten_sec = %b | ",low_min_prev,low_one_tenth_sec_prev,low_sec_prev,low_ten_sec_prev);
`endif
	if (
		( low_min_expected_prev !== 1'bx ) && ( low_min_prev !== low_min_expected_prev )
		&& ((low_min_expected_prev !== last_low_min_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port low_min :: @time = %t",  $realtime);
		$display ("     Expected value = %b", low_min_expected_prev);
		$display ("     Real value = %b", low_min_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_low_min_exp = low_min_expected_prev;
	end
	if (
		( low_one_tenth_sec_expected_prev !== 1'bx ) && ( low_one_tenth_sec_prev !== low_one_tenth_sec_expected_prev )
		&& ((low_one_tenth_sec_expected_prev !== last_low_one_tenth_sec_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port low_one_tenth_sec :: @time = %t",  $realtime);
		$display ("     Expected value = %b", low_one_tenth_sec_expected_prev);
		$display ("     Real value = %b", low_one_tenth_sec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_low_one_tenth_sec_exp = low_one_tenth_sec_expected_prev;
	end
	if (
		( low_sec_expected_prev !== 1'bx ) && ( low_sec_prev !== low_sec_expected_prev )
		&& ((low_sec_expected_prev !== last_low_sec_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port low_sec :: @time = %t",  $realtime);
		$display ("     Expected value = %b", low_sec_expected_prev);
		$display ("     Real value = %b", low_sec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_low_sec_exp = low_sec_expected_prev;
	end
	if (
		( low_ten_sec_expected_prev !== 1'bx ) && ( low_ten_sec_prev !== low_ten_sec_expected_prev )
		&& ((low_ten_sec_expected_prev !== last_low_ten_sec_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port low_ten_sec :: @time = %t",  $realtime);
		$display ("     Expected value = %b", low_ten_sec_expected_prev);
		$display ("     Real value = %b", low_ten_sec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_low_ten_sec_exp = low_ten_sec_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Seven_segment_digital_tube_choose_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg clr;
reg rst;
// wires                                               
wire low_min;
wire low_one_tenth_sec;
wire low_sec;
wire low_ten_sec;

wire sampler;                             

// assign statements (if any)                          
Seven_segment_digital_tube_choose i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.clr(clr),
	.low_min(low_min),
	.low_one_tenth_sec(low_one_tenth_sec),
	.low_sec(low_sec),
	.low_ten_sec(low_ten_sec),
	.rst(rst)
);

// clk
initial
begin
	clk = 1'b0;
end 

// clr
initial
begin
	clr = 1'b0;
end 

// rst
initial
begin
	rst = 1'b0;
end 

Seven_segment_digital_tube_choose_vlg_sample_tst tb_sample (
	.clk(clk),
	.clr(clr),
	.rst(rst),
	.sampler_tx(sampler)
);

Seven_segment_digital_tube_choose_vlg_check_tst tb_out(
	.low_min(low_min),
	.low_one_tenth_sec(low_one_tenth_sec),
	.low_sec(low_sec),
	.low_ten_sec(low_ten_sec),
	.sampler_rx(sampler)
);
endmodule

