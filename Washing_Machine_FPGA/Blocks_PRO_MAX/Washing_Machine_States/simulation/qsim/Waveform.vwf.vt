// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/12/2022 01:10:40"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Washing_Machine_States
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Washing_Machine_States_vlg_sample_tst(
	Dehydrating_timer,
	Draining_timer,
	End,
	Rinsing_timer,
	Start,
	Warning_timer,
	Water_level,
	clk,
	rst,
	sampler_tx
);
input  Dehydrating_timer;
input  Draining_timer;
input  End;
input  Rinsing_timer;
input  Start;
input  Warning_timer;
input  Water_level;
input  clk;
input  rst;
output sampler_tx;

reg sample;
time current_time;
always @(Dehydrating_timer or Draining_timer or End or Rinsing_timer or Start or Warning_timer or Water_level or clk or rst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Washing_Machine_States_vlg_check_tst (
	Led_dehydrating,
	Led_free,
	Led_rinsing,
	Led_warning,
	Led_water_draining,
	Led_water_supply,
	clr,
	state,
	sampler_rx
);
input  Led_dehydrating;
input  Led_free;
input  Led_rinsing;
input  Led_warning;
input  Led_water_draining;
input  Led_water_supply;
input  clr;
input [2:0] state;
input sampler_rx;

reg  Led_dehydrating_expected;
reg  Led_free_expected;
reg  Led_rinsing_expected;
reg  Led_warning_expected;
reg  Led_water_draining_expected;
reg  Led_water_supply_expected;
reg  clr_expected;
reg [2:0] state_expected;

reg  Led_dehydrating_prev;
reg  Led_free_prev;
reg  Led_rinsing_prev;
reg  Led_warning_prev;
reg  Led_water_draining_prev;
reg  Led_water_supply_prev;
reg  clr_prev;
reg [2:0] state_prev;

reg  Led_dehydrating_expected_prev;
reg  Led_free_expected_prev;
reg  Led_rinsing_expected_prev;
reg  Led_warning_expected_prev;
reg  Led_water_draining_expected_prev;
reg  Led_water_supply_expected_prev;
reg  clr_expected_prev;
reg [2:0] state_expected_prev;

reg  last_Led_dehydrating_exp;
reg  last_Led_free_exp;
reg  last_Led_rinsing_exp;
reg  last_Led_warning_exp;
reg  last_Led_water_draining_exp;
reg  last_Led_water_supply_exp;
reg  last_clr_exp;
reg [2:0] last_state_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	Led_dehydrating_prev = Led_dehydrating;
	Led_free_prev = Led_free;
	Led_rinsing_prev = Led_rinsing;
	Led_warning_prev = Led_warning;
	Led_water_draining_prev = Led_water_draining;
	Led_water_supply_prev = Led_water_supply;
	clr_prev = clr;
	state_prev = state;
end

// update expected /o prevs

always @(trigger)
begin
	Led_dehydrating_expected_prev = Led_dehydrating_expected;
	Led_free_expected_prev = Led_free_expected;
	Led_rinsing_expected_prev = Led_rinsing_expected;
	Led_warning_expected_prev = Led_warning_expected;
	Led_water_draining_expected_prev = Led_water_draining_expected;
	Led_water_supply_expected_prev = Led_water_supply_expected;
	clr_expected_prev = clr_expected;
	state_expected_prev = state_expected;
end



// expected Led_dehydrating
initial
begin
	Led_dehydrating_expected = 1'bX;
end 

// expected Led_free
initial
begin
	Led_free_expected = 1'bX;
end 

// expected Led_rinsing
initial
begin
	Led_rinsing_expected = 1'bX;
end 

// expected Led_warning
initial
begin
	Led_warning_expected = 1'bX;
end 

// expected Led_water_draining
initial
begin
	Led_water_draining_expected = 1'bX;
end 

// expected Led_water_supply
initial
begin
	Led_water_supply_expected = 1'bX;
end 

// expected clr
initial
begin
	clr_expected = 1'bX;
end 
// expected state[ 2 ]
initial
begin
	state_expected[2] = 1'bX;
end 
// expected state[ 1 ]
initial
begin
	state_expected[1] = 1'bX;
end 
// expected state[ 0 ]
initial
begin
	state_expected[0] = 1'bX;
end 
// generate trigger
always @(Led_dehydrating_expected or Led_dehydrating or Led_free_expected or Led_free or Led_rinsing_expected or Led_rinsing or Led_warning_expected or Led_warning or Led_water_draining_expected or Led_water_draining or Led_water_supply_expected or Led_water_supply or clr_expected or clr or state_expected or state)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Led_dehydrating = %b | expected Led_free = %b | expected Led_rinsing = %b | expected Led_warning = %b | expected Led_water_draining = %b | expected Led_water_supply = %b | expected clr = %b | expected state = %b | ",Led_dehydrating_expected_prev,Led_free_expected_prev,Led_rinsing_expected_prev,Led_warning_expected_prev,Led_water_draining_expected_prev,Led_water_supply_expected_prev,clr_expected_prev,state_expected_prev);
	$display("| real Led_dehydrating = %b | real Led_free = %b | real Led_rinsing = %b | real Led_warning = %b | real Led_water_draining = %b | real Led_water_supply = %b | real clr = %b | real state = %b | ",Led_dehydrating_prev,Led_free_prev,Led_rinsing_prev,Led_warning_prev,Led_water_draining_prev,Led_water_supply_prev,clr_prev,state_prev);
`endif
	if (
		( Led_dehydrating_expected_prev !== 1'bx ) && ( Led_dehydrating_prev !== Led_dehydrating_expected_prev )
		&& ((Led_dehydrating_expected_prev !== last_Led_dehydrating_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Led_dehydrating :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Led_dehydrating_expected_prev);
		$display ("     Real value = %b", Led_dehydrating_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Led_dehydrating_exp = Led_dehydrating_expected_prev;
	end
	if (
		( Led_free_expected_prev !== 1'bx ) && ( Led_free_prev !== Led_free_expected_prev )
		&& ((Led_free_expected_prev !== last_Led_free_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Led_free :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Led_free_expected_prev);
		$display ("     Real value = %b", Led_free_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Led_free_exp = Led_free_expected_prev;
	end
	if (
		( Led_rinsing_expected_prev !== 1'bx ) && ( Led_rinsing_prev !== Led_rinsing_expected_prev )
		&& ((Led_rinsing_expected_prev !== last_Led_rinsing_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Led_rinsing :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Led_rinsing_expected_prev);
		$display ("     Real value = %b", Led_rinsing_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Led_rinsing_exp = Led_rinsing_expected_prev;
	end
	if (
		( Led_warning_expected_prev !== 1'bx ) && ( Led_warning_prev !== Led_warning_expected_prev )
		&& ((Led_warning_expected_prev !== last_Led_warning_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Led_warning :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Led_warning_expected_prev);
		$display ("     Real value = %b", Led_warning_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Led_warning_exp = Led_warning_expected_prev;
	end
	if (
		( Led_water_draining_expected_prev !== 1'bx ) && ( Led_water_draining_prev !== Led_water_draining_expected_prev )
		&& ((Led_water_draining_expected_prev !== last_Led_water_draining_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Led_water_draining :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Led_water_draining_expected_prev);
		$display ("     Real value = %b", Led_water_draining_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Led_water_draining_exp = Led_water_draining_expected_prev;
	end
	if (
		( Led_water_supply_expected_prev !== 1'bx ) && ( Led_water_supply_prev !== Led_water_supply_expected_prev )
		&& ((Led_water_supply_expected_prev !== last_Led_water_supply_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Led_water_supply :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Led_water_supply_expected_prev);
		$display ("     Real value = %b", Led_water_supply_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Led_water_supply_exp = Led_water_supply_expected_prev;
	end
	if (
		( clr_expected_prev !== 1'bx ) && ( clr_prev !== clr_expected_prev )
		&& ((clr_expected_prev !== last_clr_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clr :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clr_expected_prev);
		$display ("     Real value = %b", clr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_clr_exp = clr_expected_prev;
	end
	if (
		( state_expected_prev[0] !== 1'bx ) && ( state_prev[0] !== state_expected_prev[0] )
		&& ((state_expected_prev[0] !== last_state_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_state_exp[0] = state_expected_prev[0];
	end
	if (
		( state_expected_prev[1] !== 1'bx ) && ( state_prev[1] !== state_expected_prev[1] )
		&& ((state_expected_prev[1] !== last_state_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_state_exp[1] = state_expected_prev[1];
	end
	if (
		( state_expected_prev[2] !== 1'bx ) && ( state_prev[2] !== state_expected_prev[2] )
		&& ((state_expected_prev[2] !== last_state_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_state_exp[2] = state_expected_prev[2];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Washing_Machine_States_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Dehydrating_timer;
reg Draining_timer;
reg End;
reg Rinsing_timer;
reg Start;
reg Warning_timer;
reg Water_level;
reg clk;
reg rst;
// wires                                               
wire Led_dehydrating;
wire Led_free;
wire Led_rinsing;
wire Led_warning;
wire Led_water_draining;
wire Led_water_supply;
wire clr;
wire [2:0] state;

wire sampler;                             

// assign statements (if any)                          
Washing_Machine_States i1 (
// port map - connection between master ports and signals/registers   
	.Dehydrating_timer(Dehydrating_timer),
	.Draining_timer(Draining_timer),
	.\End (End),
	.Led_dehydrating(Led_dehydrating),
	.Led_free(Led_free),
	.Led_rinsing(Led_rinsing),
	.Led_warning(Led_warning),
	.Led_water_draining(Led_water_draining),
	.Led_water_supply(Led_water_supply),
	.Rinsing_timer(Rinsing_timer),
	.Start(Start),
	.Warning_timer(Warning_timer),
	.Water_level(Water_level),
	.clk(clk),
	.clr(clr),
	.rst(rst),
	.state(state)
);

// Dehydrating_timer
initial
begin
	Dehydrating_timer = 1'b0;
end 

// Draining_timer
initial
begin
	Draining_timer = 1'b0;
end 

// End
initial
begin
	End = 1'b0;
end 

// Rinsing_timer
initial
begin
	Rinsing_timer = 1'b0;
end 

// Start
initial
begin
	Start = 1'b0;
end 

// Warning_timer
initial
begin
	Warning_timer = 1'b0;
end 

// Water_level
initial
begin
	Water_level = 1'b0;
end 

// clk
initial
begin
	clk = 1'b0;
end 

// rst
initial
begin
	rst = 1'b0;
end 

Washing_Machine_States_vlg_sample_tst tb_sample (
	.Dehydrating_timer(Dehydrating_timer),
	.Draining_timer(Draining_timer),
	.End(End),
	.Rinsing_timer(Rinsing_timer),
	.Start(Start),
	.Warning_timer(Warning_timer),
	.Water_level(Water_level),
	.clk(clk),
	.rst(rst),
	.sampler_tx(sampler)
);

Washing_Machine_States_vlg_check_tst tb_out(
	.Led_dehydrating(Led_dehydrating),
	.Led_free(Led_free),
	.Led_rinsing(Led_rinsing),
	.Led_warning(Led_warning),
	.Led_water_draining(Led_water_draining),
	.Led_water_supply(Led_water_supply),
	.clr(clr),
	.state(state),
	.sampler_rx(sampler)
);
endmodule

