// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/12/2022 01:47:39"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    LED_dot_matrix
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module LED_dot_matrix_vlg_sample_tst(
	clk,
	clr,
	rst,
	second,
	state,
	sampler_tx
);
input  clk;
input  clr;
input  rst;
input  second;
input [2:0] state;
output sampler_tx;

reg sample;
time current_time;
always @(clk or clr or rst or second or state)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module LED_dot_matrix_vlg_check_tst (
	H,
	L,
	sampler_rx
);
input [15:0] H;
input [15:0] L;
input sampler_rx;

reg [15:0] H_expected;
reg [15:0] L_expected;

reg [15:0] H_prev;
reg [15:0] L_prev;

reg [15:0] H_expected_prev;
reg [15:0] L_expected_prev;

reg [15:0] last_H_exp;
reg [15:0] last_L_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	H_prev = H;
	L_prev = L;
end

// update expected /o prevs

always @(trigger)
begin
	H_expected_prev = H_expected;
	L_expected_prev = L_expected;
end


// expected H[ 15 ]
initial
begin
	H_expected[15] = 1'bX;
end 
// expected H[ 14 ]
initial
begin
	H_expected[14] = 1'bX;
end 
// expected H[ 13 ]
initial
begin
	H_expected[13] = 1'bX;
end 
// expected H[ 12 ]
initial
begin
	H_expected[12] = 1'bX;
end 
// expected H[ 11 ]
initial
begin
	H_expected[11] = 1'bX;
end 
// expected H[ 10 ]
initial
begin
	H_expected[10] = 1'bX;
end 
// expected H[ 9 ]
initial
begin
	H_expected[9] = 1'bX;
end 
// expected H[ 8 ]
initial
begin
	H_expected[8] = 1'bX;
end 
// expected H[ 7 ]
initial
begin
	H_expected[7] = 1'bX;
end 
// expected H[ 6 ]
initial
begin
	H_expected[6] = 1'bX;
end 
// expected H[ 5 ]
initial
begin
	H_expected[5] = 1'bX;
end 
// expected H[ 4 ]
initial
begin
	H_expected[4] = 1'bX;
end 
// expected H[ 3 ]
initial
begin
	H_expected[3] = 1'bX;
end 
// expected H[ 2 ]
initial
begin
	H_expected[2] = 1'bX;
end 
// expected H[ 1 ]
initial
begin
	H_expected[1] = 1'bX;
end 
// expected H[ 0 ]
initial
begin
	H_expected[0] = 1'bX;
end 
// expected L[ 15 ]
initial
begin
	L_expected[15] = 1'bX;
end 
// expected L[ 14 ]
initial
begin
	L_expected[14] = 1'bX;
end 
// expected L[ 13 ]
initial
begin
	L_expected[13] = 1'bX;
end 
// expected L[ 12 ]
initial
begin
	L_expected[12] = 1'bX;
end 
// expected L[ 11 ]
initial
begin
	L_expected[11] = 1'bX;
end 
// expected L[ 10 ]
initial
begin
	L_expected[10] = 1'bX;
end 
// expected L[ 9 ]
initial
begin
	L_expected[9] = 1'bX;
end 
// expected L[ 8 ]
initial
begin
	L_expected[8] = 1'bX;
end 
// expected L[ 7 ]
initial
begin
	L_expected[7] = 1'bX;
end 
// expected L[ 6 ]
initial
begin
	L_expected[6] = 1'bX;
end 
// expected L[ 5 ]
initial
begin
	L_expected[5] = 1'bX;
end 
// expected L[ 4 ]
initial
begin
	L_expected[4] = 1'bX;
end 
// expected L[ 3 ]
initial
begin
	L_expected[3] = 1'bX;
end 
// expected L[ 2 ]
initial
begin
	L_expected[2] = 1'bX;
end 
// expected L[ 1 ]
initial
begin
	L_expected[1] = 1'bX;
end 
// expected L[ 0 ]
initial
begin
	L_expected[0] = 1'bX;
end 
// generate trigger
always @(H_expected or H or L_expected or L)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected H = %b | expected L = %b | ",H_expected_prev,L_expected_prev);
	$display("| real H = %b | real L = %b | ",H_prev,L_prev);
`endif
	if (
		( H_expected_prev[0] !== 1'bx ) && ( H_prev[0] !== H_expected_prev[0] )
		&& ((H_expected_prev[0] !== last_H_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_expected_prev);
		$display ("     Real value = %b", H_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_H_exp[0] = H_expected_prev[0];
	end
	if (
		( H_expected_prev[1] !== 1'bx ) && ( H_prev[1] !== H_expected_prev[1] )
		&& ((H_expected_prev[1] !== last_H_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_expected_prev);
		$display ("     Real value = %b", H_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_H_exp[1] = H_expected_prev[1];
	end
	if (
		( H_expected_prev[2] !== 1'bx ) && ( H_prev[2] !== H_expected_prev[2] )
		&& ((H_expected_prev[2] !== last_H_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_expected_prev);
		$display ("     Real value = %b", H_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_H_exp[2] = H_expected_prev[2];
	end
	if (
		( H_expected_prev[3] !== 1'bx ) && ( H_prev[3] !== H_expected_prev[3] )
		&& ((H_expected_prev[3] !== last_H_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_expected_prev);
		$display ("     Real value = %b", H_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_H_exp[3] = H_expected_prev[3];
	end
	if (
		( H_expected_prev[4] !== 1'bx ) && ( H_prev[4] !== H_expected_prev[4] )
		&& ((H_expected_prev[4] !== last_H_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_expected_prev);
		$display ("     Real value = %b", H_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_H_exp[4] = H_expected_prev[4];
	end
	if (
		( H_expected_prev[5] !== 1'bx ) && ( H_prev[5] !== H_expected_prev[5] )
		&& ((H_expected_prev[5] !== last_H_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_expected_prev);
		$display ("     Real value = %b", H_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_H_exp[5] = H_expected_prev[5];
	end
	if (
		( H_expected_prev[6] !== 1'bx ) && ( H_prev[6] !== H_expected_prev[6] )
		&& ((H_expected_prev[6] !== last_H_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_expected_prev);
		$display ("     Real value = %b", H_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_H_exp[6] = H_expected_prev[6];
	end
	if (
		( H_expected_prev[7] !== 1'bx ) && ( H_prev[7] !== H_expected_prev[7] )
		&& ((H_expected_prev[7] !== last_H_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_expected_prev);
		$display ("     Real value = %b", H_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_H_exp[7] = H_expected_prev[7];
	end
	if (
		( H_expected_prev[8] !== 1'bx ) && ( H_prev[8] !== H_expected_prev[8] )
		&& ((H_expected_prev[8] !== last_H_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_expected_prev);
		$display ("     Real value = %b", H_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_H_exp[8] = H_expected_prev[8];
	end
	if (
		( H_expected_prev[9] !== 1'bx ) && ( H_prev[9] !== H_expected_prev[9] )
		&& ((H_expected_prev[9] !== last_H_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_expected_prev);
		$display ("     Real value = %b", H_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_H_exp[9] = H_expected_prev[9];
	end
	if (
		( H_expected_prev[10] !== 1'bx ) && ( H_prev[10] !== H_expected_prev[10] )
		&& ((H_expected_prev[10] !== last_H_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_expected_prev);
		$display ("     Real value = %b", H_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_H_exp[10] = H_expected_prev[10];
	end
	if (
		( H_expected_prev[11] !== 1'bx ) && ( H_prev[11] !== H_expected_prev[11] )
		&& ((H_expected_prev[11] !== last_H_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_expected_prev);
		$display ("     Real value = %b", H_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_H_exp[11] = H_expected_prev[11];
	end
	if (
		( H_expected_prev[12] !== 1'bx ) && ( H_prev[12] !== H_expected_prev[12] )
		&& ((H_expected_prev[12] !== last_H_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_expected_prev);
		$display ("     Real value = %b", H_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_H_exp[12] = H_expected_prev[12];
	end
	if (
		( H_expected_prev[13] !== 1'bx ) && ( H_prev[13] !== H_expected_prev[13] )
		&& ((H_expected_prev[13] !== last_H_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_expected_prev);
		$display ("     Real value = %b", H_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_H_exp[13] = H_expected_prev[13];
	end
	if (
		( H_expected_prev[14] !== 1'bx ) && ( H_prev[14] !== H_expected_prev[14] )
		&& ((H_expected_prev[14] !== last_H_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_expected_prev);
		$display ("     Real value = %b", H_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_H_exp[14] = H_expected_prev[14];
	end
	if (
		( H_expected_prev[15] !== 1'bx ) && ( H_prev[15] !== H_expected_prev[15] )
		&& ((H_expected_prev[15] !== last_H_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_expected_prev);
		$display ("     Real value = %b", H_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_H_exp[15] = H_expected_prev[15];
	end
	if (
		( L_expected_prev[0] !== 1'bx ) && ( L_prev[0] !== L_expected_prev[0] )
		&& ((L_expected_prev[0] !== last_L_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L_expected_prev);
		$display ("     Real value = %b", L_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_L_exp[0] = L_expected_prev[0];
	end
	if (
		( L_expected_prev[1] !== 1'bx ) && ( L_prev[1] !== L_expected_prev[1] )
		&& ((L_expected_prev[1] !== last_L_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L_expected_prev);
		$display ("     Real value = %b", L_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_L_exp[1] = L_expected_prev[1];
	end
	if (
		( L_expected_prev[2] !== 1'bx ) && ( L_prev[2] !== L_expected_prev[2] )
		&& ((L_expected_prev[2] !== last_L_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L_expected_prev);
		$display ("     Real value = %b", L_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_L_exp[2] = L_expected_prev[2];
	end
	if (
		( L_expected_prev[3] !== 1'bx ) && ( L_prev[3] !== L_expected_prev[3] )
		&& ((L_expected_prev[3] !== last_L_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L_expected_prev);
		$display ("     Real value = %b", L_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_L_exp[3] = L_expected_prev[3];
	end
	if (
		( L_expected_prev[4] !== 1'bx ) && ( L_prev[4] !== L_expected_prev[4] )
		&& ((L_expected_prev[4] !== last_L_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L_expected_prev);
		$display ("     Real value = %b", L_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_L_exp[4] = L_expected_prev[4];
	end
	if (
		( L_expected_prev[5] !== 1'bx ) && ( L_prev[5] !== L_expected_prev[5] )
		&& ((L_expected_prev[5] !== last_L_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L_expected_prev);
		$display ("     Real value = %b", L_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_L_exp[5] = L_expected_prev[5];
	end
	if (
		( L_expected_prev[6] !== 1'bx ) && ( L_prev[6] !== L_expected_prev[6] )
		&& ((L_expected_prev[6] !== last_L_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L_expected_prev);
		$display ("     Real value = %b", L_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_L_exp[6] = L_expected_prev[6];
	end
	if (
		( L_expected_prev[7] !== 1'bx ) && ( L_prev[7] !== L_expected_prev[7] )
		&& ((L_expected_prev[7] !== last_L_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L_expected_prev);
		$display ("     Real value = %b", L_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_L_exp[7] = L_expected_prev[7];
	end
	if (
		( L_expected_prev[8] !== 1'bx ) && ( L_prev[8] !== L_expected_prev[8] )
		&& ((L_expected_prev[8] !== last_L_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L_expected_prev);
		$display ("     Real value = %b", L_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_L_exp[8] = L_expected_prev[8];
	end
	if (
		( L_expected_prev[9] !== 1'bx ) && ( L_prev[9] !== L_expected_prev[9] )
		&& ((L_expected_prev[9] !== last_L_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L_expected_prev);
		$display ("     Real value = %b", L_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_L_exp[9] = L_expected_prev[9];
	end
	if (
		( L_expected_prev[10] !== 1'bx ) && ( L_prev[10] !== L_expected_prev[10] )
		&& ((L_expected_prev[10] !== last_L_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L_expected_prev);
		$display ("     Real value = %b", L_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_L_exp[10] = L_expected_prev[10];
	end
	if (
		( L_expected_prev[11] !== 1'bx ) && ( L_prev[11] !== L_expected_prev[11] )
		&& ((L_expected_prev[11] !== last_L_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L_expected_prev);
		$display ("     Real value = %b", L_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_L_exp[11] = L_expected_prev[11];
	end
	if (
		( L_expected_prev[12] !== 1'bx ) && ( L_prev[12] !== L_expected_prev[12] )
		&& ((L_expected_prev[12] !== last_L_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L_expected_prev);
		$display ("     Real value = %b", L_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_L_exp[12] = L_expected_prev[12];
	end
	if (
		( L_expected_prev[13] !== 1'bx ) && ( L_prev[13] !== L_expected_prev[13] )
		&& ((L_expected_prev[13] !== last_L_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L_expected_prev);
		$display ("     Real value = %b", L_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_L_exp[13] = L_expected_prev[13];
	end
	if (
		( L_expected_prev[14] !== 1'bx ) && ( L_prev[14] !== L_expected_prev[14] )
		&& ((L_expected_prev[14] !== last_L_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L_expected_prev);
		$display ("     Real value = %b", L_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_L_exp[14] = L_expected_prev[14];
	end
	if (
		( L_expected_prev[15] !== 1'bx ) && ( L_prev[15] !== L_expected_prev[15] )
		&& ((L_expected_prev[15] !== last_L_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L_expected_prev);
		$display ("     Real value = %b", L_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_L_exp[15] = L_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module LED_dot_matrix_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg clr;
reg rst;
reg second;
reg [2:0] state;
// wires                                               
wire [15:0] H;
wire [15:0] L;

wire sampler;                             

// assign statements (if any)                          
LED_dot_matrix i1 (
// port map - connection between master ports and signals/registers   
	.H(H),
	.L(L),
	.clk(clk),
	.clr(clr),
	.rst(rst),
	.second(second),
	.state(state)
);

// clk
always
begin
	clk = 1'b0;
	clk = #500 1'b1;
	#500;
end 

// clr
initial
begin
	clr = 1'b1;
end 

// second
always
begin
	second = 1'b0;
	second = #25000 1'b1;
	#25000;
end 

// rst
initial
begin
	rst = 1'b0;
	rst = #10000 1'b1;
end 
// state[ 2 ]
initial
begin
	repeat(2)
	begin
		state[2] = 1'b0;
		state[2] = #200000 1'b1;
		# 200000;
	end
	state[2] = 1'b0;
end 
// state[ 1 ]
always
begin
	state[1] = 1'b0;
	state[1] = #100000 1'b1;
	#100000;
end 
// state[ 0 ]
always
begin
	state[0] = 1'b0;
	state[0] = #50000 1'b1;
	#50000;
end 

LED_dot_matrix_vlg_sample_tst tb_sample (
	.clk(clk),
	.clr(clr),
	.rst(rst),
	.second(second),
	.state(state),
	.sampler_tx(sampler)
);

LED_dot_matrix_vlg_check_tst tb_out(
	.H(H),
	.L(L),
	.sampler_rx(sampler)
);
endmodule

